package com.davlop.hottest.ui.base

import android.annotation.SuppressLint
import android.graphics.drawable.Drawable
import android.os.Bundle
import android.view.View
import androidx.constraintlayout.widget.ConstraintLayout
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.transition.TransitionManager
import com.bumptech.glide.Glide
import com.davlop.hottest.R
import com.davlop.hottest.ui.ProductListBigAdapter
import com.davlop.hottest.ui.details.ProductSellersDialogFragment
import com.davlop.hottest.utils.revertVisibility
import com.davlop.hottest.utils.startBrowserIntent
import com.google.android.material.button.MaterialButton
import io.reactivex.android.schedulers.AndroidSchedulers
import io.reactivex.disposables.CompositeDisposable
import kotlinx.android.synthetic.main.fragment_product_list_big.*

abstract class ProductListBigFragment: ProductBaseFragment() {

    private val disposable = CompositeDisposable()

    protected lateinit var listAdapter: ProductListBigAdapter

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        listAdapter = ProductListBigAdapter(Glide.with(this))
        subscribeUi()
    }

    private fun subscribeUi() {
        disposable.addAll(
            // onError implemented to prevent crashes generated by Navigation Components
            // if a different error occurred, throw it as normal
            // see: https://stackoverflow.com/a/52415792
            listAdapter.itemClickSubject
                .subscribe ({ navigateToProductDetailsFragment(it) }, { if (it !is IllegalArgumentException) throw it }),
            listAdapter.imageClickSubject
                .subscribe { showProductImageExtended(it) },
            listAdapter.favoriteClickSubject
                .subscribe { handleFavoriteButtonClick(it) },
            listAdapter.buyClickSubject
                .subscribe { handleBuyProductClick(it) }
        )

        rv_list_products_big.apply {
            layoutManager = LinearLayoutManager(context)
            adapter = listAdapter
        }
    }

    protected abstract fun navigateToProductDetailsFragment(productId: String)

    protected abstract fun showProductImageExtended(drawable: Drawable)

    private fun handleBuyProductClick(sellers: List<String>) {
        when {
            sellers.size == 1 -> startBrowserIntent(sellers[0])
            sellers.size > 1 -> {
                val sellersFragment = ProductSellersDialogFragment().newInstance(sellers.toTypedArray())
                sellersFragment.show(childFragmentManager, null)
            }
        }
    }

    @SuppressLint("CheckResult")
    private fun handleFavoriteButtonClick(args: ProductListBigAdapter.FavoriteButtonArgs) {
        val view = rv_list_products_big.layoutManager?.findViewByPosition(args.position)
        val constraintLayoutItem = view?.findViewById<ConstraintLayout>(args.constraintLayoutId)
        val bnFavorites = constraintLayoutItem?.findViewById<MaterialButton>(R.id.bn_favorites)
        val bnFavoritesAdded = constraintLayoutItem?.findViewById<MaterialButton>(R.id.bn_favorites_added)

        productViewModel.addFavoriteProduct(args.productId)
            .observeOn(AndroidSchedulers.mainThread())
            .subscribe ({
                TransitionManager.beginDelayedTransition(constraintLayoutItem!!)
                bnFavorites?.revertVisibility()
                bnFavoritesAdded?.revertVisibility()

                productViewModel.getFavoriteStatus(args.productId)
                    .subscribe({
                        showFavoriteAddedButton(bnFavoritesAdded)
                    }, {
                        showFavoriteRemovedButton(bnFavoritesAdded)
                    })
            },
                {})
    }

    private fun showFavoriteRemovedButton(bnFavoritesAdded: MaterialButton?) {
        bnFavoritesAdded?.apply {
            text = resources.getString(R.string.favorites_removed)
            icon = resources.getDrawable(R.drawable.ic_cancel_black_24dp)
        }
    }

    private fun showFavoriteAddedButton(bnFavoritesAdded: MaterialButton?) {
        bnFavoritesAdded?.apply {
            text = resources.getString(R.string.favorites_added)
            icon = resources.getDrawable(R.drawable.ic_check_black_24dp)
        }
    }

    override fun onDestroy() {
        super.onDestroy()
        disposable.dispose()
    }

}